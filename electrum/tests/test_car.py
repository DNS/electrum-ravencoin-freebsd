from electrum.ipfs_car import AsyncByteStreamHolder, write_raw_from_car
from electrum.bitcoin import var_int

import asyncio

def main():
    ipfs_hash_1 = 'Qmc5gCcjYypU7y28oCALwfSvxCBskLuPKWpK4qpterKC7z'
    car_block_1 = b':\xa2eroots\x81\xd8*X%\x00\x01p\x12 \xcc-\x97b \x82\r\x02;qp\xf5 \xd3I\x0e\x81\x1e\xd9\x88\xae=b!GN\xe9~U\x9b\x03agversion\x01:\x01p\x12 \xcc-\x97b \x82\r\x02;qp\xf5 \xd3I\x0e\x81\x1e\xd9\x88\xae=b!GN\xe9~U\x9b\x03a\n\x14\x08\x02\x12\x0eHello World!\r\n\x18\x0e'
    
    car_block_2 = (b":\xa2eroots\x81\xd8*X%\x00\x01p\x12 \x8e\xf6\xca\x1e\x0b\xf0F%\x9ci\x92Br'\x90\x89\xda\xcf}\xcb^L\xb3\x9d\xe6}\x10\xc4h\xeePCgversion\x01\xdb\x1b\x01p\x12 \x8e\xf6\xca\x1e\x0b\xf0F%\x9ci\x92Br'\x90\x89\xda\xcf}\xcb^L\xb3\x9d\xe6}\x10\xc4h\xeePC\n\xb4\x1b\x08\x02\x12\xac\x1bThis message channel will serve as a way to broadcast information regarding the electrum development for Ravencoin.\n\nIn addition to using the built-in signing of electrum, I will now be signing release hashes with PGP. My key for electrum will be updated on the github and can be found below:\n\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: User-ID:\tkralverde\nComment: Fingerprint:\t8F7F5A9836304F183D66F4F5C9"
                   b'740F62C390680F\n\n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\n=uiUx\n-----END PGP PUBLIC KEY BLOCK-----\n\n\x18\xac\x1b')
    
    car_block_3 = b'\n\xa1gversion\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00\xc0\x01\x00\x00\x00\x00\x00\x00\xf3\x01\x00\x00\x00\x00\x00\x008\xa2eroots\x81\xd8*X#\x00\x12 \xfb\x16\xf5\x084\x12\xef\x13q\xd01\xedJ\xa29\x90=\x84\xef\xda\xdf\x1b\xa3\xcdg\x8edu\xb1\xa22\xf8gversion\x01Q\x12 \xfb\x16\xf5\x084\x12\xef\x13q\xd01\xedJ\xa29\x90=\x84\xef\xda\xdf\x1b\xa3\xcdg\x8edu\xb1\xa22\xf8\x12-\n"\x12 \xd9\xc0\xd57m&\xf1\x93\x1fz\xd5-z\xcc\x00\xfc\x10\x90\xd2\xed\xb0\x80\x8b\xf6\x1e\xeb\n\x15(&\xf6&\x12\x04\xf0\x9f\x8d\xa4\x18\xa4\x01\x85\x01\x12 \xd9\xc0\xd57m&\xf1\x93\x1fz\xd5-z\xcc\x00\xfc\x10\x90\xd2\xed\xb0\x80\x8b\xf6\x1e\xeb\n\x15(&\xf6&\x121\n"\x12 \xd7E\xb7u\x7f[E\x93\xee\xabx 0l{\xc6N\xb4\x96\xa7A\n\r\x07\xdfz4\xff\xecK\x97\xf1\x12\tbarreleye\x18:\x12.\n$\x01U\x12 \xa2\xe1\xc4\r\xa1\xae3]M\xff\xe7)\xebM\\\xa2;t\xb9\xe5\x1f\xc55\xf4\xa8\x04\xa2a\x08\x0c)M\x12\x04\xf0\x9f\x90\xa1\x18\x07X\x12 \xd7E\xb7u\x7f[E\x93\xee\xabx 0l{\xc6N\xb4\x96\xa7A\n\r\x07\xdfz4\xff\xecK\x97\xf1\x124\n$\x01U\x12 \xb4t\xa9\x9a\'\x05\xe2<\xf9\x05\xa4\x84\xecm\x14\xefX\xb5k\xbeb\xe9)\'\x83Fn\xc3c\xb5\x07-\x12\nfishmonger\x18\x04(\x01U\x12 \xb4t\xa9\x9a\'\x05\xe2<\xf9\x05\xa4\x84\xecm\x14\xefX\xb5k\xbeb\xe9)\'\x83Fn\xc3c\xb5\x07-fish+\x01U\x12 \xa2\xe1\xc4\r\xa1\xae3]M\xff\xe7)\xebM\\\xa2;t\xb9\xe5\x1f\xc55\xf4\xa8\x04\xa2a\x08\x0c)Mlobster\x01\x00\x00\x00(\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00\xa2\xe1\xc4\r\xa1\xae3]M\xff\xe7)\xebM\\\xa2;t\xb9\xe5\x1f\xc55\xf4\xa8\x04\xa2a\x08\x0c)M\x94\x01\x00\x00\x00\x00\x00\x00\xb4t\xa9\x9a\'\x05\xe2<\xf9\x05\xa4\x84\xecm\x14\xefX\xb5k\xbeb\xe9)\'\x83Fn\xc3c\xb5\x07-k\x01\x00\x00\x00\x00\x00\x00\xd7E\xb7u\x7f[E\x93\xee\xabx 0l{\xc6N\xb4\x96\xa7A\n\r\x07\xdfz4\xff\xecK\x97\xf1\x12\x01\x00\x00\x00\x00\x00\x00\xd9\xc0\xd57m&\xf1\x93\x1fz\xd5-z\xcc\x00\xfc\x10\x90\xd2\xed\xb0\x80\x8b\xf6\x1e\xeb\n\x15(&\xf6&\x8b\x00\x00\x00\x00\x00\x00\x00\xfb\x16\xf5\x084\x12\xef\x13q\xd01\xedJ\xa29\x90=\x84\xef\xda\xdf\x1b\xa3\xcdg\x8edu\xb1\xa22\xf89\x00\x00\x00\x00\x00\x00\x00'

    ipfs_hash_4 = 'bafybeiafeldwoxlr347ohs6u63h5xgyylbwnebns45c6mufff75oktosc4'
    car_block_4 = open('/home/work/Desktop/test/raw_ipfs/bafybeiafeldwoxlr347ohs6u63h5xgyylbwnebns45c6mufff75oktosc4.dat', 'rb').read()

    async def test():
        stream = AsyncByteStreamHolder()
        await stream.append_bytes(car_block_4)
        await stream.mark_complete()
        await write_raw_from_car(stream, ipfs_hash_4)

    asyncio.run(test())

if __name__ == '__main__':
    main()